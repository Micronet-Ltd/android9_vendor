/*
 * Copyright (c) 2017-2018, The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *     * Neither the name of The Linux Foundation nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _SPI_OPERATIONS_H_
#define _SPI_OPERATIONS_H_

#ifdef _WIGIG_ARCH_SPI

#include <sensor1.h>
#include <iosfwd>

// *************************************************************************************************

// SPI request state machine
enum SpiRequestState
{
    SPI_REQ_CREATED,     // Just created request, with an initial state
    SPI_REQ_SENT,        // Sent to the service, waiting for reply
    SPI_REQ_COMPLETED,   // Successfully completed (received valid response w/ successful status)
    SPI_REQ_FAILED       // Completed with failure (received response w/ failure status)
};

std::ostream& operator<<(std::ostream& os, const SpiRequestState& spiReqState);

// *************************************************************************************************

// A base class for all SPI requests. All requests are blocking and only a single pending request
// is allowed at the same time period. Request classes are responsible for request/response data
// structures - they construct a request buffer and analyze a response from the service.
// The interaction with the service is under SPI driver's responsibility.

class SpiRequest
{
    friend std::ostream& operator<<(std::ostream& os, const SpiRequest& spiRequest);

public:

    // Request buffer builder. A request generated by this class cannot be sent directly. Instead,
    // it should be copied to a service-allocated buffer. This double copy may affect perfromance of
    // WriteBlock and WMI commands but these commands are not expected to be executed in a time-critical
    // path od SPI setup.

    virtual const uint8_t* GetRequestBuffer() const = 0;
    virtual uint32_t GetRequestLength() const = 0;

    // Non-copyable dummy methods
    SpiRequest(const SpiRequest&);
    SpiRequest& operator=(const SpiRequest&);

    bool CreateRequestHeader(sensor1_msg_header_s& msgHdr);
    void Complete(const uint8_t* pResponseBuf, uint32_t responseSize);
    bool IsCompletedSuccessfully() const { return SPI_REQ_COMPLETED == m_State; }

protected:

    SpiRequest(): m_State(SPI_REQ_CREATED) {}
    virtual ~SpiRequest() {}

    SpiRequestState GetState() const { return m_State; }

private:

    SpiRequestState m_State;

    virtual bool IsValidRequest() const = 0;
    virtual uint32_t GetMessageId() const = 0;
    virtual bool ImportResponseBuffer(const uint8_t* pResponseBuf, uint32_t responseSize) = 0;
    virtual std::ostream& Print(std::ostream& os) const = 0;

};


#endif   // _WIGIG_ARCH_SPI
#endif   // _SPI_OPERATIONS_H_

// AUTOGENERATED FILE: DO NOT EDIT

package com.qualcomm.qti.qms.api.mink;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

// Copyright (c) 2016-2018 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
public interface IClientEnv {
  int IClientEnv_OP_open = 0;
  int IClientEnv_OP_registerLegacy = 1;
  int IClientEnv_OP_register = 2;
  int IClientEnv_OP_registerWithWhitelist = 3;

  void open(int uid_val, IMinkObject[] obj_ptr) throws IMinkObject.InvokeException;

  void registerLegacy(byte[] credentials_val, IMinkObject[] clientEnv_ptr) throws IMinkObject.InvokeException;

  void register(IMinkObject credentials_val, IMinkObject[] clientEnv_ptr) throws IMinkObject.InvokeException;

  void registerWithWhitelist(IMinkObject credentials_val, int[] uids_val, IMinkObject[] clientEnv_ptr) throws IMinkObject.InvokeException;

  class Proxy extends MinkProxy implements IClientEnv {
    public Proxy(IMinkObject o) {
      super(o);
    }

    @Override
    public void open(int uid_val, IMinkObject[] obj_ptr) throws IMinkObject.InvokeException {
      byte[][] bi = new byte[1][];
      IMinkObject[] oo = new IMinkObject[1];
      bi[0] = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN).putInt(uid_val).array();

      minkObject.invoke(IClientEnv_OP_open,bi,null,null,null,oo);

      if (obj_ptr != null) {
        obj_ptr[0] = oo[0];
      }

    }
    @Override
    public void registerLegacy(byte[] credentials_val, IMinkObject[] clientEnv_ptr) throws IMinkObject.InvokeException {
      byte[][] bi = new byte[1][];
      IMinkObject[] oo = new IMinkObject[1];
      bi[0] = credentials_val;

      minkObject.invoke(IClientEnv_OP_registerLegacy,bi,null,null,null,oo);

      if (clientEnv_ptr != null) {
        clientEnv_ptr[0] = oo[0];
      }

    }
    @Override
    public void register(IMinkObject credentials_val, IMinkObject[] clientEnv_ptr) throws IMinkObject.InvokeException {
      IMinkObject[] oi = new IMinkObject[1];
      IMinkObject[] oo = new IMinkObject[1];
      oi[0] = credentials_val;

      minkObject.invoke(IClientEnv_OP_register,null,null,null,oi,oo);

      if (clientEnv_ptr != null) {
        clientEnv_ptr[0] = oo[0];
      }

    }
    @Override
    public void registerWithWhitelist(IMinkObject credentials_val, int[] uids_val, IMinkObject[] clientEnv_ptr) throws IMinkObject.InvokeException {
      byte[][] bi = new byte[1][];
      IMinkObject[] oi = new IMinkObject[1];
      IMinkObject[] oo = new IMinkObject[1];
      oi[0] = credentials_val;
      if(uids_val != null) {
        ByteBuffer buffer_uids_val = ByteBuffer.allocate(uids_val.length*4).order(ByteOrder.LITTLE_ENDIAN);
        buffer_uids_val.asIntBuffer().put(uids_val);
        bi[0] = buffer_uids_val.array();
      }

      minkObject.invoke(IClientEnv_OP_registerWithWhitelist,bi,null,null,oi,oo);

      if (clientEnv_ptr != null) {
        clientEnv_ptr[0] = oo[0];
      }

    }

  }
  // Copyright (c) 2016-2018 Qualcomm Technologies, Inc.
  // All Rights Reserved.
  // Confidential and Proprietary - Qualcomm Technologies, Inc.
  class MinkObject extends JMinkObject {
    private IClientEnv mObj;
    public MinkObject(IClientEnv obj) {
      super();
      mObj = obj;
    }
    @Override
    public void retain() {
      super.retain();
    }
    @Override
    public void release() {
      super.release();
      if (mRefs.get() == 0) mObj = null;
    }
    @Override
    public boolean isNull() {
      return mObj == null;
    }
    public void invoke(int methodID, byte[][] bi, int[] boSizes, byte[][] bo, IMinkObject[] oi, IMinkObject[] oo)throws IMinkObject.InvokeException {
      if (null == mObj) throw new IMinkObject.InvokeException(IMinkObject.ERROR_BADOBJ);
      switch (methodID) {
        case IClientEnv_OP_open: {
          if (bi[0].length != 4) {
            break;
          }
          int uid = ByteBuffer.wrap(bi[0]).order(ByteOrder.LITTLE_ENDIAN).getInt();
          IMinkObject[] obj = new IMinkObject[1];
          mObj.open(uid,obj);
          oo[0] = obj[0];
          return;
        }
        case IClientEnv_OP_registerLegacy: {
          byte[] credentials = ByteBuffer.wrap(bi[0]).order(ByteOrder.LITTLE_ENDIAN).array();
          IMinkObject[] clientEnv = new IMinkObject[1];
          mObj.registerLegacy(credentials,clientEnv);
          oo[0] = clientEnv[0];
          return;
        }
        case IClientEnv_OP_register: {
          IMinkObject[] clientEnv = new IMinkObject[1];
          mObj.register(oi[0],clientEnv);
          oo[0] = clientEnv[0];
          return;
        }
        case IClientEnv_OP_registerWithWhitelist: {
          int[] uids = ByteBuffer.wrap(bi[0]).order(ByteOrder.LITTLE_ENDIAN).asIntBuffer().array();
          IMinkObject[] clientEnv = new IMinkObject[1];
          mObj.registerWithWhitelist(oi[0],uids,clientEnv);
          oo[0] = clientEnv[0];
          return;
        }
        default:throw new IMinkObject.InvokeException(IMinkObject.ERROR_INVALID);
      }
    }

  }

}
